// –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
const roles = ['Developer', 'Sales', 'Product Manager'];

// –û–∂–∏–¥–∞–Ω–∏—è –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ localStorage
let expectations = JSON.parse(localStorage.getItem('expectations')) || {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
const tabs = document.querySelectorAll('.tab');
const containers = document.querySelectorAll('.container');

tabs.forEach(tab => {
    tab.addEventListener('click', () => {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const targetTab = tab.getAttribute('data-tab');
        containers.forEach(container => {
            if (container.id === targetTab) {
                container.classList.add('active');
            } else {
                container.classList.remove('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        const selectedRole = roleSelectShare.value;
        if (targetTab === 'share') {
            renderAddExpectations(selectedRole); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        } else if (targetTab === 'received') {
            renderViewExpectations(selectedRole);
        } else if (targetTab === 'map') {
            renderExpectationsMap();
        }
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ–º"
const roleSelectShare = document.getElementById('roleSelectShare');
roles.forEach(role => {
    const option = document.createElement('option');
    option.value = role;
    option.textContent = role;
    roleSelectShare.appendChild(option);
});

const addExpectationsContainer = document.getElementById('addExpectationsContainer');
const viewExpectationsContainer = document.getElementById('viewExpectationsContainer');
const expectationsMap = document.getElementById('expectationsMap');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ID —Ä–æ–ª–µ–π (–∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–µ—Ñ–∏—Å–∞–º–∏)
function normalizeRoleId(role) {
    return role.toLowerCase().replace(/\s+/g, '-');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
function renderAddExpectations(selectedRole) {
    if (!addExpectationsContainer) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    addExpectationsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

    roles.forEach(toRole => {
        const cell = document.createElement('div');
        cell.className = 'cell';

        const title = document.createElement('h4');
        title.textContent = `${selectedRole} ‚Üí ${toRole}`;
        cell.appendChild(title);

        // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ';

        const addBtn = document.createElement('button');
        addBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ';
        addBtn.onclick = () => {
            addExpectation(selectedRole, toRole, input.value);
            renderAddExpectations(selectedRole); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        };

        cell.appendChild(input);
        cell.appendChild(addBtn);

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã —Ä–æ–ª–µ–π
        const expectationList = expectations[selectedRole]?.[toRole] || [];

        expectationList.forEach((expectation, index) => {
            const expectationDiv = document.createElement('div');
            expectationDiv.classList.add('expectation-item');

            const expectationText = document.createElement('input');
            expectationText.type = 'text';
            expectationText.value = expectation.text;
            expectationText.onblur = () => editExpectation(selectedRole, toRole, index, expectationText.value);

            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
            deleteBtn.onclick = () => {
                deleteExpectation(selectedRole, toRole, index);
                renderAddExpectations(selectedRole); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            };

            expectationDiv.appendChild(expectationText);
            expectationDiv.appendChild(deleteBtn);
            cell.appendChild(expectationDiv);
        });

        addExpectationsContainer.appendChild(cell);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –æ–∂–∏–¥–∞–Ω–∏–π –≤ –≤–∏–¥–µ –º–∞—Ç—Ä–∏—Ü—ã
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –æ–∂–∏–¥–∞–Ω–∏–π –≤ –≤–∏–¥–µ –º–∞—Ç—Ä–∏—Ü—ã
function renderExpectationsMap() {
    console.log("–†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É –æ–∂–∏–¥–∞–Ω–∏–π...");
    
    roles.forEach(fromRole => {
        roles.forEach(toRole => {
            const cellId = `${normalizeRoleId(fromRole)}-${normalizeRoleId(toRole)}`;
            const mapCell = document.getElementById(cellId);
            if (!mapCell) {
                console.error(`–Ø—á–µ–π–∫–∞ —Å id ${cellId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
                return; // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
            }

            console.log(`–†–µ–Ω–¥–µ—Ä —è—á–µ–π–∫–∏: ${fromRole} ‚Üí ${toRole}`);

            mapCell.innerHTML = ''; // –û—á–∏—â–∞–µ–º —è—á–µ–π–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫

            // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã —Ä–æ–ª–µ–π
            const expectationList = expectations[fromRole]?.[toRole] || [];
            console.log(`–û–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${fromRole} ‚Üí ${toRole}: `, expectationList);

            if (fromRole === toRole) {
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º self expectations –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                expectationList.forEach(expectation => {
                    const card = document.createElement('div');
                    card.className = `map-card ${expectation.category || 'gray'}`;
                    card.textContent = expectation.text;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ—Ç—Å–µ–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã)
                    if (expectation.comment && expectation.comment.trim()) {
                        card.setAttribute('data-comment', expectation.comment); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        const commentIcon = document.createElement('span');
                        commentIcon.className = 'comment-icon';
                        commentIcon.textContent = 'üí¨'; // –ò–∫–æ–Ω–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        card.appendChild(commentIcon);
                    }

                    mapCell.appendChild(card);
                    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ self-expectation –∫–∞—Ä—Ç–æ—á–∫–∞: ${expectation.text}`);
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–∂–∏–¥–∞–Ω–∏–π —Å —Ü–≤–µ—Ç–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
                if (expectationList.length > 0) {
                    expectationList.forEach(expectation => {
                        const card = document.createElement('div');
                        card.className = `map-card ${expectation.category || 'gray'}`;
                        card.textContent = expectation.text;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ—Ç—Å–µ–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã)
                        if (expectation.comment && expectation.comment.trim()) {
                            card.setAttribute('data-comment', expectation.comment); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                            const commentIcon = document.createElement('span');
                            commentIcon.className = 'comment-icon';
                            commentIcon.textContent = 'üí¨'; // –ò–∫–æ–Ω–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                            card.appendChild(commentIcon);
                        }

                        mapCell.appendChild(card);
                        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: ${expectation.text}`);
                    });
                } else {
                    mapCell.textContent = '–ù–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–π'; // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                    console.log(`–ù–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–π –¥–ª—è ${fromRole} ‚Üí ${toRole}`);
                }
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π
function renderViewExpectations(selectedRole) {
    if (!viewExpectationsContainer) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    viewExpectationsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

    roles.forEach(fromRole => {
        if (fromRole === selectedRole) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É —Ä–æ–ª—å

        const cell = document.createElement('div');
        cell.className = 'cell';

        const title = document.createElement('h4');
        title.textContent = `${fromRole} ‚Üí ${selectedRole}`;
        cell.appendChild(title);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏–π
        const expectationList = expectations[fromRole]?.[selectedRole] || [];

        expectationList.forEach((expectation, index) => {
            const expectationDiv = document.createElement('div');
            expectationDiv.classList.add('expectation-item');

            const expectationText = document.createElement('p');
            expectationText.textContent = `–û–∂–∏–¥–∞–Ω–∏–µ: ${expectation.text}`;
            expectationDiv.appendChild(expectationText);

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏–π
            const buttonsDiv = document.createElement('div');
            buttonsDiv.className = 'buttons-div';

            const agreeBtn = document.createElement('button');
            agreeBtn.textContent = 'Agree';
            agreeBtn.className = 'green-btn';
            if (expectation.category === 'green') {
                agreeBtn.classList.add('button-active'); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ
            }
            agreeBtn.onclick = () => {
                setCategory(fromRole, selectedRole, index, 'green');
                highlightSelectedButton(buttonsDiv, agreeBtn);
            };

            const discussBtn = document.createElement('button');
            discussBtn.textContent = 'Discuss';
            discussBtn.className = 'yellow-btn';
            if (expectation.category === 'yellow') {
                discussBtn.classList.add('button-active'); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ
            }
            discussBtn.onclick = () => {
                setCategory(fromRole, selectedRole, index, 'yellow');
                highlightSelectedButton(buttonsDiv, discussBtn);
            };

            const disagreeBtn = document.createElement('button');
            disagreeBtn.textContent = 'Disagree';
            disagreeBtn.className = 'red-btn';
            if (expectation.category === 'red') {
                disagreeBtn.classList.add('button-active'); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ
            }
            disagreeBtn.onclick = () => {
                setCategory(fromRole, selectedRole, index, 'red');
                highlightSelectedButton(buttonsDiv, disagreeBtn);
            };

            buttonsDiv.appendChild(agreeBtn);
            buttonsDiv.appendChild(discussBtn);
            buttonsDiv.appendChild(disagreeBtn);
            expectationDiv.appendChild(buttonsDiv);

            // –ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "Discuss" –∏–ª–∏ "Disagree"
            const commentInput = document.createElement('input');
            commentInput.type = 'text';
            commentInput.placeholder = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
            commentInput.value = expectation.comment || '';
            commentInput.style.display = ['yellow', 'red'].includes(expectation.category) ? 'block' : 'none';
            commentInput.onblur = () => saveComment(fromRole, selectedRole, index, commentInput.value);
            expectationDiv.appendChild(commentInput);

            cell.appendChild(expectationDiv);
        });

        viewExpectationsContainer.appendChild(cell);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º
function highlightSelectedButton(buttonsDiv, selectedBtn) {
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    buttonsDiv.querySelectorAll('button').forEach(btn => btn.classList.remove('button-active'));

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    selectedBtn.classList.add('button-active');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
function addExpectation(fromRole, toRole, value) {
    if (!expectations[fromRole]) {
        expectations[fromRole] = {};
    }
    if (!expectations[fromRole][toRole]) {
        expectations[fromRole][toRole] = [];
    }
    expectations[fromRole][toRole].push({ text: value, category: '', comment: '' });
    localStorage.setItem('expectations', JSON.stringify(expectations));
    renderExpectationsMap(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
function editExpectation(fromRole, toRole, index, newValue) {
    expectations[fromRole][toRole][index].text = newValue;
    localStorage.setItem('expectations', JSON.stringify(expectations));
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
function deleteExpectation(fromRole, toRole, index) {
    expectations[fromRole][toRole].splice(index, 1);
    localStorage.setItem('expectations', JSON.stringify(expectations));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Agree, Discuss, Disagree)
function setCategory(fromRole, toRole, index, category) {
    if (!expectations[fromRole][toRole][index]) {
        return;
    }

    expectations[fromRole][toRole][index].category = category;
    localStorage.setItem('expectations', JSON.stringify(expectations));

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏–π
    const selectedRole = roleSelectShare.value;
    renderViewExpectations(selectedRole);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function saveComment(fromRole, toRole, index, comment) {
    if (!expectations[fromRole][toRole][index]) {
        return;
    }
    expectations[fromRole][toRole][index].comment = comment;
    localStorage.setItem('expectations', JSON.stringify(expectations));
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
const clearDataButton = document.getElementById('clearDataButton');
clearDataButton.addEventListener('click', () => {
    localStorage.removeItem('expectations');
    expectations = {}; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è
    renderExpectationsMap();
    renderAddExpectations(roleSelectShare.value);
});

// –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
roleSelectShare.addEventListener('change', (e) => {
    const selectedRole = e.target.value;
    renderAddExpectations(selectedRole);
    renderViewExpectations(selectedRole);
    renderExpectationsMap();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
renderAddExpectations(roles[0]);
renderViewExpectations(roles[0]);
renderExpectationsMap();
